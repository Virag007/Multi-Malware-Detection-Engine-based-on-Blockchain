import requests
import json

class vtapi():
    def __init__(self, verbose=False):
        self.verbose = verbose
        self.api = "ea7519c9d707083f3e8a290df429c0edabb1a0e9eaaf4d9d67273435b35dc584"
        self.baseurl = "https://www.virustotal.com/vtapi/v2/"

    #Print results from a file/url
    def print_scan_results(self, results):
        if results['response_code'] == 0:
            return ""
        else:
            ss="Permalink: "+results['permalink']+"\nScandate: "+results['scan_date']+"\n"
            for i in results['scans']:
                if (str(results['scans'][i]['detected']) == "False"):
                    ss=ss+i+" "+"Clean"+"\n"
                else:
                    ss=ss+i+" "+"Malicious -- "+str(results['scans'][i]['result'])+"\n"
            return ss
        if self.verbose:
            return "\n"+results

    #Checking if any `networking` related errors occured
    def check_results(self, r):
        try:
            results = r.json()
        except ValueError:
            return "URL not found, malformed URL or invalid API token"
            exit(1)
        return results

    #Function to get results of a scanned file/url
    def results(self, mode, resource):
        url = self.baseurl + "%s/report" % mode
        values = {"resource": resource,
                  "apikey": self.api}

        r = requests.post(url, values)
        results = self.check_results(r)
        return results

    #Scan a file
    def sendfile(self, filename):
        url = self.baseurl + "file/scan"
        try:
            f = open(filename, "rb")
        except:
            print ("Could not open file")

        files = {"file": f}
        values = {"apikey": self.api}
        r = requests.post(url, values, files=files)
        results = self.check_results(r)
        return results
