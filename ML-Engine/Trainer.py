import os
import pandas
import numpy
import pickle
import pefile
import sklearn.ensemble as ek
from sklearn.model_selection import cross_validate, train_test_split
from sklearn import tree, linear_model
from sklearn.feature_selection import SelectFromModel
import joblib
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression

dataset = pandas.read_csv('/home/kali/Downloads/FinalYearProject/MLDeveloping/Dataset/data.csv',sep='|', low_memory=False)
X = dataset.drop(['Name','md5','legitimate'],axis=1).values
y = dataset['legitimate'].values
extratrees = ek.ExtraTreesClassifier().fit(X,y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]
X_train, X_test, y_train, y_test = train_test_split(X_new, y ,test_size=0.2)
features = []
index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):
    print("%d. feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))
    features.append(dataset.columns[2+f])

model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),
         "RandomForest":ek.RandomForestClassifier(n_estimators=50),
         "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
         "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
         "GNB":GaussianNB(),
         "LinearRegression":LinearRegression()
}

results = {}
for algo in model:
    clf = model[algo]
    clf.fit(X_train,y_train)
    score = clf.score(X_test,y_test)
    print ("%s : %s " %(algo, score))
    results[algo] = score
winner = max(results, key=results.get)
joblib.dump(model[winner],'Classifier/classifier.pkl')
open('Classifier/features.pkl', 'wb').write(pickle.dumps(features))
clf = model[winner]
res = clf.predict(X_new)
mt = confusion_matrix(y, res)
FP=((mt[0][1] / float(sum(mt[0])))*100)
FN=((mt[1][0] / float(sum(mt[1])))*100)
TP=((mt[1][1] / float(sum(mt[1])))*100)
TN=((mt[0][0] / float(sum(mt[0])))*100)
accuracy=(TN+TP)/(FN+FP+TN+TP)
recall=TP/(FN+TP)
TNR=FP/(TN+FP)
precision=TP/(FP+TP)
fmeasure=(2*recall*precision)/(recall+precision)
print("False positive rate : %f %%" % ((mt[0][1] / float(sum(mt[0])))*100))
print('False negative rate : %f %%' % ((mt[1][0] / float(sum(mt[1])))*100))
print("True positive rate : %f %%" % ((mt[1][1] / float(sum(mt[1])))*100))
print('True negative rate : %f %%' % ((mt[0][0] / float(sum(mt[0])))*100))
print("Accuracy is: %f" % accuracy)
print("Recall: %f" % recall)
print("TNR: %f" % TNR)
print("Precision: %f" % precision)
print("F-Measure: %f" % fmeasure)
