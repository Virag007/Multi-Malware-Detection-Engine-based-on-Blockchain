from threading import *
from tkinter import *
from tkinter.filedialog import askopenfilename
import tkinter, tkinter.scrolledtext
import os
import sys
import urllib.request
import glob
import time
import hashlib
import quarantaene
import subprocess

os_name = sys.platform
terminations = []

if "win" in os_name:
    if not os.path.exists("AntiEngine\\Quarantine\\"):
        os.makedirs("AntiEngine\\Quarantine\\")
    if not os.path.exists("AntiEngine\\Large_Update_File\\"):
        os.makedirs("AntiEngine\\Large_Update_File")
    quarantine_folder = "AntiEngine\\Quarantine\\*"
    file_to_quarantine = "AntiEngine\\Quarantine\\"
    links_current = "AntiEngine\\Large_Update_File\\links_current.txt"
    links_downloaded = "AntiEngine\\Large_Update_File\\links_downloaded.txt"
    large_signatures = "AntiEngine\\Large_Update_File\\signatures.txt"
    transfer = os. getcwd() + "\\Transfer\\*"
    f = open(links_current, "a")
    f.close()
    f = open(links_downloaded, "a")
    f.close()
    f = open(large_signatures, "a")
    f.close()
else:
    if not os.path.exists("AntiEngine/Quarantine/"):
        os.makedirs("AntiEngine/Quarantine/")
    if not os.path.exists("AntiEngine/Large_Update_File/"):
        os.makedirs("AntiEngine/Large_Update_File/")
    quarantine_folder = "AntiEngine/Quarantine/*"
    file_to_quarantine = "AntiEngine/Quarantine/"
    links_current = "AntiEngine/Large_Update_File/links_current.txt"
    links_downloaded = "AntiEngine/Large_Update_File/links_downloaded.txt"
    large_signatures = "AntiEngine/Large_Update_File/signatures.txt"
    transfer = os. getcwd() + "/Transfer/*"
    f = open(links_current, "a")
    f.close()
    f = open(links_downloaded, "a")
    f.close()
    f = open(large_signatures, "a")
    f.close()

main = None
update_button = None
scan_button = None
quit_button = None
b_delete = None
b_delete_all = None
b_restore = None
b_restore_all = None
b_add_file = None
text_box = None
li = None

def quarantine():
    global text_box
    global terminations
    global li
    global b_delete
    global b_delete_all
    global b_restore
    global b_restore_all
    global b_add_file
    k = 0
    while True:
        tmp = len(li.get(k))
        if tmp == 0:
            break
        else:
            li.delete(0, tmp)
            k += 1
    li.update()
    terminations = glob.glob(quarantine_folder)
    if terminations == []:
        text_box.insert(END, "[ + ] No files in quarantine\n", "positive")
        text_box.tag_config('positive', foreground="green")
        text_box.see(END)
        text_box.update()
    else:
        text_box.insert(END, "[ + ] Files in quarantine:\n", "positive")
        text_box.tag_config('positive', foreground="green")
        text_box.see(END)
        text_box.update()
        for i in terminations:
            text_box.insert(END, "[ * ] " + i + "\n", "info")
            text_box.tag_config("info", background = "red")
            text_box.see(END)
            text_box.update()
            li.insert(END, i)
            li.update()
    b_delete_all["command"] =lambda:button_action_handler("delete_all")
    b_delete["command"] = lambda:button_action_handler("delete")
    b_restore["command"] = lambda:button_action_handler("restore")
    b_restore_all["command"] = lambda:button_action_handler("restore_all")
    b_add_file["command"] = lambda:button_action_handler("add_file")


def delete(file, ALL):
    global li
    global text_box
    global terminations
    if len(terminations) != 0:
        if ALL == 1:
            for i in range(len(terminations)):
                os.remove(terminations[i])
                text_box.insert(END, "[ + ] Deletion successful: \n" + terminations[i] + "\n", "positive")
                text_box.tag_config("positive", foreground="green")
                text_box.see(END)
                text_box.update()
                li.delete(0, len(terminations[i]))
                li.update()
        elif ALL == 0:
            os.remove(file)
            li.delete(ACTIVE, len(file))
            li.update()
            text_box.insert(END, "[ + ] Deletion successful:\n" + file + "\n", "positive")
            text_box.tag_config("positive", foreground="green")
            text_box.see(END)
            text_box.update()
        terminations = glob.glob(quarantine_folder)
        for i in terminations:
            li.insert(END, i)
        li.update()
    else:
        text_box.insert(END, "[ - ] Unable to locate any files\n", "negative")
        text_box.tag_config("negative", foreground="red")
        text_box.see(END)
        text_box.update()

def restore(file, ALL):
    global li
    global text_box
    global terminations
    if len(terminations) != 0:
        if ALL == 1:
            for i in range(len(terminations)):
                quarantaene.decode_base64(terminations[i])
                text_box.insert(END, "[ + ] Successfully restored\n" + terminations[i] + "\n", 'positive')
                text_box.tag_config('positive', foreground="green")
                text_box.see(END)
                text_box.update()
                li.delete(0, len(terminations[i]))
                li.update()
        elif ALL == 0:
            quarantaene.decode_base64(file)
            li.delete(ACTIVE, len(file))
            text_box.insert(END, "[ + ] Successfully restored\n" + file + "\n", "positive")
            text_box.tag_config("positive", foreground="green")
            text_box.see(END)
            text_box.update()
        terminations = glob.glob(quarantine_folder)
        for i in terminations:
            li.insert(END, i)
        li.update()
    else:
        text_box.insert(END, "[ - ] Unable to locate any files\n", "negative")
        text_box.tag_config("negative", foreground="red")
        text_box.see(END)
        text_box.update()


def add_file_to_quarantine():
    global li
    global terminations
    file = askopenfilename()
    quarantaene.encode_base64(file, file_to_quarantine)
    text_box.insert(END, "[ + ] Moved to quarantine:\n" + file + "\n", "positive")
    text_box.tag_config("positive", foreground="green")
    text_box.see(END)
    text_box.update()
    li.update()
    k = 0
    while True:
        tmp = len(li.get(k))
        if tmp == 0:
            break
        else:
            li.delete(0, tmp)
            k += 1
    li.update()
    terminations = glob.glob(quarantine_folder)
    for i in terminations:
        li.insert(END, i)
        li.update()

def scan():
    global text_box
    match = False
    file = askopenfilename()
    start = time.time()
    text_box.insert(END, "[ * ] Scanning " + file + "\n")
    text_box.see(END)
    text_box.update()
    try:
        f = open(file, "rb")
        content = f.read()
        f.close()
        content = create_md5(content)
        text_box.insert(END, "MD5-Hash: " + content.decode("utf-8") + "\n")
        text_box.see(END)
        text_box.update()
    except MemoryError:
        text_box.insert(END, "[ - ] Unable to create MD5-Hash:\n----->MemoryError!\n", 'negative')
        text_box.insert(END, "[ ! ] Only select files under 1 GB\n", "negative")
        text_box.tag_config('negative', foreground="red")
        text_box.see(END)
        text_box.update()
        return None
    except Exception as e:
        text_box.insert(END, "[ ! ] Unable to handle problem\n[ ! ] Try again/file might be corrupted\n", "negative")
        text_box.tag_config('negative', foreground="red")
        text_box.see(END)
        text_box.update()
        return None

    signatures = open(large_signatures, "rb")
    try:
        if content in signatures.read():
            signatures.close()
            match = True
        else:
            match = False
            signatures.close()
    except MemoryError:
        try:
            signatures.close()
            signatures = open(large_signatures, "rb")
            if content in signatures.readlines():
                f.close()
                match = True
            else:
                signatures.close()
                match = False
        except MemoryError:
            signatures.close()
            signatures = open(large_signatures, "rb")
            while True:
                tmp = signatures.readline()
                if tmp == b"":
                    signatures.close()
                    break
                if tmp == content:
                    match = True
                    signatures.close()
    except:
        text_box.insert(END, "[ - ] Something bad happened while performing the task\n", "negative")
        text_box.tag_config("negative", foreground="red")
        text_box.see(END)
        text_box.update()
        return None

    text_box.insert(END, "[ * ] Scan duration: {0}\n".format(round(time.time()-start, 2)))
    text_box.see(END)
    text_box.update()
    if (match==True):
        quarantaene.encode_base64(file, file_to_quarantine)
        text_box.insert(END, "[ ! ] Threat found\n[ ! ] File was moved into quarantine", "important")
        text_box.tag_config("important", foreground="red")
        text_box.see(END)
        text_box.update()
    else:
        output = subprocess.check_output("nmap -sP 192.168.5.1/24 | cut -d' ' -f5 | sed -n '2~3p'", shell=True).decode("utf-8")
        activeHost=sorted(output.split('\n'))
        activeHost.pop(0)
        activeHost.pop(0)
        activeHost.pop(len(activeHost)-1)
        print(activeHost)
        text_box.insert(END, "[ + ] No threat was found\n", "positive")
        text_box.tag_config("positive", foreground="green")
        text_box.see(END)
        text_box.update()
        text_box.insert(END, "[ * ] File is being preparing to broadcast\n", "positive1")
        text_box.tag_config("positive1", foreground="red")
        text_box.see(END)
        text_box.update()

        if(len(activeHost)>0):
            text_box.insert(END, "[ + ] Total no. of active hosts in the network: {0}\n".format(len(activeHost)), "positive2")
            text_box.tag_config("positive2", foreground="green")
            text_box.see(END)
            text_box.update()
            text_box.insert(END, "[ - ] Waiting for the results...\n", "positive3")
            text_box.tag_config("positive3", foreground="blue")
            text_box.see(END)
            text_box.update()
            for i in range(0,len(activeHost)):
                q="scp -i /root/.ssh/id_rsa "+ file + " " + activeHost[i] + ":/tmp "
                os.system(q)
        else:
            text_box.insert(END, "[ * ] No active hosts available\n", "positive2")
            text_box.tag_config("positive2", foreground="red")
            text_box.see(END)
            text_box.update()
            text_box.insert(END, "[ + ] Please scan later...\n", "positive3")
            text_box.tag_config("positive3", foreground="green")
            text_box.see(END)
            text_box.update()

def create_md5(content):
    md = hashlib.md5()
    md.update(content)
    return bytes(md.hexdigest(), "utf-8")

def automatic_scan(path):
    global text_box
    match = False
    file = path
    start = time.time()
    text_box.insert(END, "[ * ] Scanning " + file + "\n")
    text_box.see(END)
    text_box.update()
    try:
        f = open(file, "rb")
        content = f.read()
        f.close()
        content = create_md5(content)
        text_box.insert(END, "MD5-Hash: " + content.decode("utf-8") + "\n")
        text_box.see(END)
        text_box.update()
    except MemoryError:
        text_box.insert(END, "[ - ] Unable to create MD5-Hash:\n----->MemoryError!\n", 'negative')
        text_box.insert(END, "[ ! ] Only select files under 1 GB\n", "negative")
        text_box.tag_config('negative', foreground="red")
        text_box.see(END)
        text_box.update()
        return None
    except Exception as e:
        text_box.insert(END, "[ ! ] Unable to handle problem\n[ ! ] Try again/file might be corrupted\n", "negative")
        text_box.tag_config('negative', foreground="red")
        text_box.see(END)
        text_box.update()
        return None

    signatures = open(large_signatures, "rb")
    try:
        if content in signatures.read():
            signatures.close()
            match = True
        else:
            match = False
            signatures.close()
    except MemoryError:
        try:
            signatures.close()
            signatures = open(large_signatures, "rb")
            if content in signatures.readlines():
                f.close()
                match = True
            else:
                signatures.close()
                match = False
        except MemoryError:
            signatures.close()
            signatures = open(large_signatures, "rb")
            while True:
                tmp = signatures.readline()
                if tmp == b"":
                    signatures.close()
                    break
                if tmp == content:
                    match = True
                    signatures.close()
    except:
        text_box.insert(END, "[ - ] Something bad happened while performing the task\n", "negative")
        text_box.tag_config("negative", foreground="red")
        text_box.see(END)
        text_box.update()
        return None

    text_box.insert(END, "[ * ] Scan duration: {0}\n".format(round(time.time()-start, 2)))
    text_box.see(END)
    text_box.update()
    if (match==True):
        quarantaene.encode_base64(file, file_to_quarantine)
        text_box.insert(END, "[ ! ] Threat found\n[ ! ] File was moved into quarantine", "important")
        text_box.tag_config("important", foreground="red")
        text_box.see(END)
        text_box.update()
    else:
        text_box.insert(END, "[ + ] No threat was found\n", "positive")
        text_box.tag_config("positive", foreground="green")
        text_box.see(END)
        text_box.update()

def scanListener():
    while(True):
        list_of_files = glob.glob(transfer)
        if(len(list_of_files)>0):
            latest_file = max(list_of_files, key=os.path.getctime)
            automatic_scan(latest_file)
            os.remove(latest_file)

def link_collector():
    global text_box
    text_box.insert(END, "[ * ] Searching for update...\n")
    text_box.see(END)
    text_box.update()
    u = urllib.request.urlopen("http://virusshare.com/hashes").read().decode("utf-8").splitlines()
    f = open(links_current, "w")
    for i in u:
        if "href='" in i:
            first = i.find("href='") + len("href='")
            i = i[first:]
            last = i.find("'")
            i = i[:last]
        if 'href="' in i:
            first = i.find('href="') + len('href="')
            i = i[first:]
            last = i.find('"')
            i = i[:last]
        if "VirusShare" in i:
            f.write("http://virusshare.com/hashes/" + i + "\n")
    f.close()
    return update()

def update():
    global text_box
    zaehler = 0
    f = open(links_current, "r")
    f2 = open(links_downloaded, "r")
    f2.close()
    f2 = open(links_downloaded, "r")
    for i in f.read().splitlines():
        f2 = open(links_downloaded, "r")
        con = f2.read()
        f2.close()
        f2 = open(links_downloaded, "a")
        if i not in con:
            zaehler += 1
            f2.write(i + "\n")
            f2.close()
            text_box.insert(END, "[ * ] Download of:\n"+i)
            text_box.see(END)
            text_box.update()
            signatures = open(large_signatures, "a")
            url = i
            tmp = urllib.request.urlopen(url).read().decode("utf-8").splitlines()
            for j in tmp:
                if j[0] != '#':
                    signatures.write(j + "\n")
            signatures.close()
    if zaehler == 0:
        text_box.insert(END, "[ * ] No new updates were found\n")
        text_box.see(END)
        text_box.update()
    else:
        text_box.insert(END, "[ + ] {0} new updates were made\n".formate(zaehler), "positive")
        text_box.tag_config("positive", foreground="green")
        text_box.see(END)
        text_box.update()

def closing():
    main.destroy()
    sys.exit()

def button_action_handler(s):
    global text_box
    global b_delete
    global b_delete_all
    global b_restore
    global b_restore_all
    global b_add_file
    global li

    if s == "delete":
        tb = Thread(target=delete, args=(li.get(ACTIVE),0))
        tb.start()
    if s == "delete_all":
        tb = Thread(target=delete, args=(0,1))
        tb.start()
    if s == "restore":
        tb = Thread(target=restore, args=(li.get(ACTIVE),0))
        tb.start()
    if s == "restore_all":
        tb = Thread(target=restore, args=(0,1))
        tb.start()
    if s == "add_file":
        tb = Thread(target=add_file_to_quarantine)
        tb.start()
    if s == "update_button":
        tb = Thread(target=link_collector)
        tb.start()
    if s == "scan_button":
        tb = Thread(target=scan)
        tb.start()
    if s == "quarantine_button":
        if li.winfo_viewable()  == 0:
            b_delete.place(x = 570, y = 61)
            b_delete_all.place(x = 570, y = 86)
            b_restore.place(x = 570, y = 111)
            b_restore_all.place(x = 570, y = 136)
            b_add_file.place(x = 570, y = 161)
            li.place(x = 569, y = 2)
            tb = Thread(target=quarantine)
            tb.start()
        if li.winfo_viewable() == 1:
            b_delete.place_forget()
            b_delete_all.place_forget()
            b_restore.place_forget()
            b_restore_all.place_forget()
            b_add_file.place_forget()
            li.place_forget()
    if s == "quit_button":
        tb = Thread(target=closing)
        tb.start()

def gui_thread():
    global main
    global update_button
    global scan_button
    global quit_button
    global text_box
    global li
    global b_delete
    global b_delete_all
    global b_restore
    global b_restore_all
    global b_add_file

    main = tkinter.Tk()
    main.title("AntiEngine")
    main.wm_iconbitmap("")
    main.geometry("750x192")
    main.resizable(False, False)
    hoehe = 2
    breite = 16

    update_button = tkinter.Button(main,text = "Update", command=lambda:button_action_handler("update_button"), height = hoehe, width = breite)
    update_button.grid(row = 0, column = 0)
    scan_button = tkinter.Button(main,text = "Scan", command=lambda:button_action_handler("scan_button"), height = hoehe, width = breite)
    scan_button.grid(row = 1, column = 0)
    quarantine_button = tkinter.Button(main,text = "Quarantine", command=lambda:button_action_handler("quarantine_button"), height = hoehe, width = breite)
    quarantine_button.grid(row = 2, column = 0)
    quit_button = tkinter.Button(main,text = "Close", command=lambda:button_action_handler("quit_button"), height = hoehe, width = breite)
    quit_button.grid(row = 3, column = 0, sticky="w")
    b_delete = tkinter.Button(main,text = "Remove current", height=0, width = 20, justify=CENTER)
    b_delete_all = tkinter.Button(main,text = "Remove all", height = 0, width = 20, justify=CENTER)
    b_restore = tkinter.Button(main,text = "Restore current", height=0, width = 20, justify=CENTER)
    b_restore_all = tkinter.Button(main,text = "Restore all", height = 0, width = 20, justify=CENTER)
    b_add_file = tkinter.Button(main,text = "Add file", height = 0, width = 20, justify=CENTER)
    b_delete.place(x = 570, y = 61)
    b_delete_all.place(x = 570, y = 86)
    b_restore.place(x = 570, y = 111)
    b_restore_all.place(x = 570, y = 136)
    b_add_file.place(x = 570, y = 161)
    b_delete.place_forget()
    b_delete_all.place_forget()
    b_restore.place_forget()
    b_restore_all.place_forget()
    b_add_file.place_forget()

    text_box = tkinter.scrolledtext.ScrolledText(main)
    text_box.place(height = 192, width = 419,x = 150, y = 0)

    li = tkinter.Listbox(main, height=3, width = 22)
    li.place(x = 569, y = 2)
    li.place_forget()

    text_box.insert(END, "Your System is Protected\n", "VIP")
    text_box.tag_config("VIP", background='yellow')
    text_box.insert(END, "[ + ] Preparing the program\n", 'positive')
    text_box.tag_config('positive', foreground='green')
    text_box.see(END)
    text_box.update()

    tb1 = Thread(target=scanListener)
    tb1.start()
    main.mainloop()

t_main = Thread(target=gui_thread)
t_main.start()
